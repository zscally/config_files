* Load paths and imports
** Initialization
#+BEGIN_SRC emacs-lisp

       (load-file "~/.emacs.d/custom.el")
       (add-to-list 'load-path "~/.emacs.d/lisp/")
       (add-to-list 'load-path "~/.emacs.d/use-package/")
       (add-to-list 'load-path "~/.cargo/bin")

       (require 'package)

       (package-initialize)
       (add-to-list 'package-archives
                    '("melpa" . "http://melpa.milkbox.net/packages/") t)
       (add-to-list 'package-archives
                    '("elpa" . "https://elpa.gnu.org/packages/") t)
       (add-to-list 'package-archives
                    '("marmalade" . "http://marmalade-repo.org/packages/")
                   t)

       (eval-when-compile
         (add-to-list 'load-path "~/.emacs.d/use-package/")
         (require 'use-package))

#+END_SRC
** Always UTF8, all the time
#+BEGIN_SRC emacs-lisp
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(when (display-graphic-p)
   (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+END_SRC
** Os specific
#+BEGIN_SRC emacs-lisp

  (when (boundp 'w32-pipe-read-delay)
          (setq w32-pipe-read-delay 0))
        ;; Set the buffer size to 64K on Windows (from the original 4K)
        (when (boundp 'w32-pipe-buffer-size)
          (setq irony-server-w32-pipe-buffer-size (* 64 1024)))

  (if (eq system-type 'windows-nt)
      (setq notes-file "~/Desktop/Notes.org")
    (setq notes-file "~/Desktop/Notes.org.gpg"))

#+END_SRC

**  Use package
#+BEGIN_SRC emacs-lisp


  (use-package diminish
    :ensure t)


  (use-package auto-indent-mode
    :diminish)


  (use-package company-mode
    :diminish
    :ensure company
    :hook
    (global-company-mode))

  (use-package popup)

  (use-package org-mode
    :ensure org
    :diminish
    :hook
    (org-bullets-mode)
    :config
    (setq org-agenda-files (list notes-file))
    )
  (use-package dired+
    :init
    (setq dired-dwim-target t)
    :hook
    (dired-hide-details-mode))

  (use-package windows-path)

  (use-package ps-ccrypt)

  (use-package dirtree
    :ensure t)

  (use-package epa-file)

  (use-package xah-fly-keys
    :diminish
    :config
    (xah-fly-keys 1))

  (use-package which-key
    :ensure t
    :config
    (which-key-mode))

  (use-package helm
    :ensure t
    :config
    (helm-mode 1))

  (use-package ws-trim
    :diminish
    :config
    (global-ws-trim-mode t)
    (set-default 'ws-trim-level 2)
    (setq ws-trim-global-modes '(guess (not message-mode eshell-mode))))

  (use-package cygwin-mount)

  (use-package unbound)

  (use-package auto-indent-mode)

  (use-package adjust-parens
    :ensure t)

  (use-package auto-correct
    :diminish
    :ensure t
    :config
    (auto-correct-mode))

  (use-package csv-mode)

  (use-package vlf-setup
    :ensure vlf)

  (use-package wconf
    :ensure t)
#+END_SRC
* Mode control
** Auto mode alist
#+BEGIN_SRC emacs-lisp

  (add-to-list 'auto-mode-alist '("\\.log\\'" . auto-revert-tail-mode))

#+END_SRC
** Global and toggled modes
#+BEGIN_SRC emacs-lisp

(winner-mode 1)

(prettify-symbols-mode)

(menu-bar-mode 1)
(toggle-scroll-bar -1)
(tool-bar-mode -1)

#+END_SRC
** Load hooks
#+BEGIN_SRC emacs-lisp

  (add-hook 'before-save-hook 'whitespace-cleanup)


#+END_SRC
* File handling
** Encryption
#+BEGIN_SRC emacs-lisp

(epa-file-enable)

#+END_SRC
** Backups & versioning
#+BEGIN_SRC emacs-lisp

(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))

;; keep old versions, much version control
(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)

(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

(setq savehist-file "~/.emacs.d/savehist")
(savehist-mode 1)
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
  search-ring
  regexp-search-ring))

#+END_SRC

* Editor config
** Graphics / UI

#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  (setq visible-bell 1)
  (setq tab-width 2)
  (setq-default tab-width 2)
  (setq indent-tab-mode t)
  (show-paren-mode 1)
  (display-time-mode 1)

  (load-theme 'leuven)

  (set-face-attribute 'default nil :height 200)

  ;; Way to set title bar contexnct
                                          ;(setq frame-title-format '((:eval (projectile-project-name))))

  (global-prettify-symbols-mode t)

#+END_SRC
** Interaction / input
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)

#+END_SRC

** Code completion
#+BEGIN_SRC emacs-lisp

(setq company-dabbrev-downcase 0)
(setq company-idle-delay 0)

#+END_SRC emacs-lisp
** Operating System Integration
#+BEGIN_SRC emacs-lisp
(server-start)

#+END_SRC
** LaTex
#+BEGIN_SRC emacs-lisp
(setq latex-run-command "pdflatex")

#+END_SRC
** Xah-fly and keybinds

#+BEGIN_SRC emacs-lisp

  ;; xah fly keymap
  (xah-fly-keys-set-layout "dvorak") ; required if you use qwertyb

  (define-key xah-fly-c-keymap (kbd "l") (kbd "s u RET")) ; insert new line after
  (define-key xah-fly-c-keymap (kbd "u") 'capitalize-word)

  (define-key xah-fly-dot-keymap (kbd "r") 'org-refile)

  (define-key xah-fly-c-keymap (kbd "s") 'bookmark-set)

  (define-key xah-fly-c-keymap (kbd "w") 'writegood-mode)

  (define-key xah-fly--tab-key-map (kbd "t") 'visual-line-mode)
  (define-key xah-fly--tab-key-map (kbd "l") 'fill-region)
  (define-key xah-fly--tab-key-map (kbd "c") 'comment-or-uncomment-region)

  (define-key xah-fly--tab-key-map (kbd "e") 'xah-run-current-file)

  (define-key xah-fly--tab-key-map (kbd "n") (lambda () (interactive) (find-file notes-file)))

  (define-key xah-fly--tab-key-map (kbd "b") 'switch-to-buffer)

  (define-key xah-fly-comma-keymap (kbd ".") 'backward-kill-sentence)
  (define-key xah-fly-comma-keymap (kbd "p") 'kill-sentence)

                                          ; xah-fly deep editing
                                          ; Custom xah-fly leader layout
  (xah-fly--define-keys
   (define-prefix-command 'xah-fly-leader-key-map)
   '(
     ("SPC" . xah-fly-insert-mode-activate)
     ("DEL" . xah-fly-insert-mode-activate)
     ("RET" . execute-extended-command)
     ("TAB" . xah-fly--tab-key-map)
     ("." . xah-fly-dot-keymap)
     ("'" . xah-fill-or-unfill)
     ("," . xah-fly-comma-keymap)
     ("i" . xah-fly-i-keymap)
     ("-" . xah-display-form-feed-as-line)
     ;; /
     ;; ;
     ;; =
     ;; [
     ("\\" . toggle-input-method)
     ;; `

     ;; 1
     ;; 2
     ("3" . delete-window)
     ("4" . split-window-right)
     ("5" . balance-windows)
     ("6" . xah-upcase-sentence)
     ;; 7
     ;; 8
     ("9" . ispell-word)
     ;; 0

     ("a" . mark-whole-buffer)
     ("b" . end-of-buffer)
     ("c" . xah-fly-c-keymap)
     ("d" . beginning-of-buffer)
     ("e" . xah-fly-e-keymap)
     ("f" . xah-search-current-word)
     ("g" . isearch-forward)
     ("h" . xah-fly-h-keymap)
     ("j" . xah-copy-all-or-region)
     ("k" . xah-paste-or-paste-previous)
     ("l" . recenter-top-bottom)
     ("m" . dired-jump)
     ("n" . xah-fly-n-keymap)
     ("o" . exchange-point-and-mark)
     ("p" . query-replace)
     ("q" . xah-cut-all-or-region)
     ("r" . xah-fly-r-keymap)
     ("s" . save-buffer)
     ("t" . xah-fly-t-keymap)
     ("u" . switch-to-buffer)
     ;; v
     ("w" . xah-fly-w-keymap)
     ;; x
     ("y" . xah-show-kill-ring)
     ;; z
     ;;
     ))

  (xah-fly--define-keys
   (define-prefix-command 'xah-fly-i-keymap)
   '(
     ("a" . org-agenda)
     ("c" . org-capture)
     ("s" . org-schedule)
     ("o" . org-open-at-point)
     ("l" . org-store-link)
     ("i" . org-insert-link)
     ))


  (defvar my-keys-minor-mode-map
    (let ((map (make-sparse-keymap)))
      (define-key map (kbd "M-c") 'scroll-other-window-down)
      (define-key map (kbd "M-t") 'scroll-other-window)
      (define-key map (kbd "M-g") 'my-mark-word-backward)
      (define-key map (kbd "M-r") 'my-mark-word)
      (define-key map (kbd "SPC-i-t") 'scroll-other-window)
      map)
    "my-keys-minor-mode keymap.")

  (define-minor-mode my-keys-minor-mode
    "A minor mode so that my key settings override annoying major modes."
    :init-value t
    :lighter "mf")

  (my-keys-minor-mode 1)


#+END_SRC

** Org mode
#+BEGIN_SRC emacs-lisp
  (setq org-hide-emphasis-markers t)
  (setq org-default-notes-file notes-file)
  (setq org-indent-mode t)
#+END_SRC
