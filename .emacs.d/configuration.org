* Load paths and imports
** Custom Set Variables (MUST BE FIRST)
#+BEGIN_SRC emacs-lisp
  (custom-set-variables '(helm-ag-command-option "-i"))
#+END_SRC
** Initialization
#+BEGIN_SRC emacs-lisp
  (define-obsolete-function-alias 'org-define-error 'define-error)

  (load-file "~/.emacs.d/custom.el")
  (add-to-list 'load-path "~/.emacs.d/lisp/")
  (add-to-list 'load-path "~/.emacs.d/use-package/")
  (add-to-list 'load-path "~/.cargo/bin")

  (require 'package)
  (require 'misc)

  (package-initialize)
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.milkbox.net/packages/") t)
  (add-to-list 'package-archives
               '("elpa" . "https://elpa.gnu.org/packages/") t)
  (add-to-list 'package-archives
               '("org" . "https://orgmode.org/elpa/") t)
  (package-refresh-contents)

  (eval-when-compile
    (add-to-list 'load-path "~/.emacs.d/use-package/")
    (require 'use-package))

#+END_SRC
** Always UTF8, all the time
#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (when (display-graphic-p)
     (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+END_SRC
** Os specific
#+BEGIN_SRC emacs-lisp
  (when (boundp 'w32-pipe-read-delay)
          (setq w32-pipe-read-delay 0))
        ;; Set the buffer size to 64K on Windows (from the original 4K)
        (when (boundp 'w32-pipe-buffer-size)
          (setq irony-server-w32-pipe-buffer-size (* 64 1024)))

  (getenv "HOME")

  (if (eq system-type 'windows-nt)
      (setq notes-file (getenv "NOTESORG"))
    (setq notes-file "~/Desktop/Notes.org.gpg"))

  (if (eq system-type 'windows-nt)
      (setq config-file (getenv "EMACSCONFIG"))
    (setq config-file "~/.emacs.d/configuration.org"))

  (if (eq system-type 'windows-nt)
      (progn
        (setq w32-get-true-file-attributes nil)))

  (if (eq system-type 'windows-nt)
      (progn
        (setq exec-path (append exec-path '("c:/Cygwin64/bin/")))
        (setq python-shell-interpreter "c:/Program Files (x86)/Python36-32/python.exe")
        ))


  (if (eq system-type 'windows-nt)
      (let ((proc (start-process "cmd" nil "cmd.exe" "/C" "start" "cmd.exe")))
        (set-process-query-on-exit-flag proc nil)))
#+END_SRC

** Use package
#+BEGIN_SRC emacs-lisp
  (use-package smart-mode-line
    :ensure t
    :config
    (progn
      (setq evil-mode-line-format '(before . mode-line-front-space))
      (setq sml/theme 'dark)
      (setq sml/no-confirm-load-theme t)
      (sml/setup)
      ))

  (use-package evil-leader
    :after evil
    :ensure t)

  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))

  (use-package ample-regexps
    :ensure t)

  (use-package sentence-navigation)

  (use-package goto-chg
    :ensure t)

  (use-package diminish
    :ensure t)

  (use-package auto-indent-mode
    :diminish
    :config
    (auto-indent-global-mode))

  (use-package ac-php
    :ensure t)

  (use-package company-try-hard
    :ensure t)

  (use-package company
    :diminish
    :ensure company
    :config
    (add-hook 'after-init-hook 'global-company-mode)
    (setq company-backends
          '((company-files
             company-keywords
             company-capf
             company-predictive
             company-cmake))))

  (use-package powerbuilder-mode
    :if (eq system-type 'windows-nt))

  (use-package popup)

  (use-package org-bullets
    :if
    (eq system-type 'gnu/linux)
    :ensure t
    :init
    (setq org-bullets-bullet-list
          '("◉" "◎" "⚫" "○" "►" "◇"))
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  (use-package org
    :ensure org-plus-contrib
    :pin org
    :diminish
    :config
    (setq org-agenda-files (list notes-file)))

  (use-package ox-md)
  (use-package ox-twbs
    :if
    (eq system-type 'gnu/linux))

  (use-package ox-latex)

  (use-package atomic-chrome
    :if (eq system-type 'windows-nt))


  (use-package dired+
    :init
    (setq dired-dwim-target t)
    :hook
    (dired-hide-details-mode))

  (use-package windows-path)

  (use-package ps-ccrypt)

  (use-package dirtree
    :ensure t)

  (use-package epa-file
    :config)

  (use-package which-key
    :ensure t
    :config
    (which-key-mode))

  (use-package helm
    :ensure t
    :config
    (helm-mode 1)
    (setq helm-bookmark-show-location t))

  (use-package ws-trim
    :diminish
    :config
    (global-ws-trim-mode t)
    (set-default 'ws-trim-level 2)
    (setq ws-trim-global-modes '(guess (not message-mode eshell-mode))))

  (use-package cygwin-mount)

  (use-package setup-cygwin
    :if (eq system-type 'windows-nt))

  (use-package unbound)

  (use-package adjust-parens
    :ensure t)

  (use-package auto-correct
    :diminish
    :ensure t
    :config
    (auto-correct-mode))

  (use-package csv-mode
    :ensure t)

  (use-package vlf-setup
    :ensure vlf)

  (use-package wconf
    :ensure t)

  (use-package undo-tree
    :ensure t)

  (use-package darkroom
    :ensure t)

  (use-package yasnippet
    :ensure t
    :config
    (yas-global-mode 1))
#+END_SRC
* Mode control
** Auto mode alist
#+BEGIN_SRC emacs-lisp

  (add-to-list 'auto-mode-alist '("\\.log\\'" . auto-revert-tail-mode))
  (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
  (add-to-list 'auto-mode-alist '("\\.org.gpg\\'" . org-mode))

#+END_SRC
** Global and toggled modes
#+BEGIN_SRC emacs-lisp

(winner-mode 1)

(if (not (eq system-type 'windows-nt))
    (global-prettify-symbols-mode t))

(menu-bar-mode -1)
(toggle-scroll-bar -1)
(tool-bar-mode -1)

#+END_SRC
** Load hooks
#+BEGIN_SRC emacs-lisp

  (add-hook 'before-save-hook 'whitespace-cleanup)

  (add-hook 'python-mode-hook
            (lambda ()
              (setq indent-tabs-mode t)
              (setq python-indent 2)
              (setq tab-width 2)))


#+END_SRC
* File handling
** Encryption
#+BEGIN_SRC emacs-lisp
  (if (eq system-type 'window-nt)
      (setf epa-pinentry-mode 'loopback))
  (epa-file-enable)

#+END_SRC
** Backups & versioning
#+BEGIN_SRC emacs-lisp

(setq backup-directory-alist
          `(("." . ,(concat user-emacs-directory "backups"))))
;; keep old versions, much version control
(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)

(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

(setq savehist-file "~/.emacs.d/savehist")
(savehist-mode 1)
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
  search-ring
  regexp-search-ring))

#+END_SRC

* Editor config
** Graphics / UI

#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  (setq visible-bell 1)
  (setq-default tab-width 2)
  (setq-default indent-tabs-mode t)
  (show-paren-mode 1)
  (display-time-mode 1)

  (if (eq system-type 'gnu/linux)
      (load-theme 'tango-dark)
      (load-theme 'leuven))

  (set-face-attribute 'default nil :height 160)

#+END_SRC
** Interaction / input
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
  (undo-tree-mode)
#+END_SRC

** Text
#+BEGIN_SRC emacs-lisp

  (if (eq system-type 'windows-nt)
      (add-to-list 'exec-path ""))

  (setq-default search-invisible t)

#+END_SRC
** Code completion
#+BEGIN_SRC emacs-lisp
  (setq company-dabbrev-downcase 0)
  (setq company-idle-delay 0.3)

#+END_SRC
** Operating System Integration
#+BEGIN_SRC emacs-lisp
  (server-start)
  (setq delete-by-moving-to-trash t)

  (if (eq system-type 'window-nt)
      (progn
        'atomic-chrome-start-httpd
        'atomic-chrome-start-server))
#+END_SRC
** LaTex
#+BEGIN_SRC emacs-lisp
  (setq latex-run-command "pdflatex")

#+END_SRC
** Keybindings

#+BEGIN_SRC emacs-lisp
  (setq evil-want-integration nil) ; Must be done before loading evil
  (global-evil-leader-mode)

  (windmove-default-keybindings)

  (defvar my-leader-map (make-sparse-keymap))
  (defvar my-org-menu (make-sparse-keymap))
  (defvar my-nav-menu (make-sparse-keymap))
  (defvar my-command-menu (make-sparse-keymap))
  (defvar my-buffer-menu (make-sparse-keymap))
  (defvar my-window-menu (make-sparse-keymap))
  (defvar my-visual-menu (make-sparse-keymap))

  (evil-leader/set-leader "<SPC>")

  (evil-leader/set-key
    "o" my-org-menu
    "c" my-command-menu
    "b" my-buffer-menu
    "w" my-window-menu
    "g" my-nav-menu
    "v" my-visual-menu
    "SPC" 'helm-M-x
    "f" 'helm-find-files
    "n" 'evil-buffer-new
    "m" 'dired-jump
    "s" 'save-buffer
    "TAB" 'company-try-hard
    "q" 'save-buffers-kill-terminal)

  (with-eval-after-load 'evil-maps
    (progn
      (define-key evil-normal-state-map (kbd "M-t") 'scroll-other-window)
      (define-key evil-normal-state-map (kbd "M-c") 'scroll-other-window-down)
      (define-key evil-normal-state-map (kbd "g t") 'evil-next-buffer)
      (define-key evil-normal-state-map (kbd "g T") 'evil-prev-buffer)
      ))

  (defun load-notes ()
    "Load notes org"
    (interactive)
    (find-file notes-file))

  (defun load-config ()
    "Load emacs config"
    (interactive)
    (find-file config-file))


  (define-key my-nav-menu (kbd "n") 'load-notes)
  (define-key my-nav-menu (kbd "c") 'load-config)
  (define-key my-nav-menu (kbd "s") '(lambda nil
                                     (interactive)
                                   (switch-to-buffer (get-buffer-create "*scratch*"))
                                   (lisp-interaction-mode)))

  (define-key my-org-menu (kbd "c") 'org-capture)
  (define-key my-org-menu (kbd "a") 'org-agenda)
  (define-key my-org-menu (kbd "r") 'org-refile)
  (define-key my-org-menu (kbd "m") 'helm-imenu)

  (define-key my-visual-menu (kbd "v") 'visual-line-mode)
  (define-key my-visual-menu (kbd "c") 'centered-cursor-mode)

  (define-key my-command-menu (kbd "s") 'bookmark-set)
  (define-key my-command-menu (kbd "c") 'helm-filtered-bookmarks)

  (define-key my-buffer-menu (kbd "b") 'helm-mini)
  (define-key my-buffer-menu (kbd "i") 'ibuffer)
  (define-key my-buffer-menu (kbd "c") 'kill-buffer)
  (define-key my-buffer-menu (kbd "n") 'next-buffer)
  (define-key my-buffer-menu (kbd "p") 'previous-buffer)

  (define-key my-window-menu (kbd "k") 'delete-window)
  (define-key my-window-menu (kbd "c") 'delete-other-windows)
  (define-key my-window-menu (kbd "h") 'split-window-horizontally)
  (define-key my-window-menu (kbd "v") 'split-window-vertically)
  (define-key my-window-menu (kbd "o") 'other-window)
  (define-key my-window-menu (kbd "f") 'toggle-frame-fullscreen)
#+END_SRC
** Evil Config
#+BEGIN_SRC emacs-lisp

  (add-to-list 'load-path "~/.emacs.d/lisp/evil")
  (require 'evil)
  (evil-mode 1)

#+END_SRC
** Evil sentence
#+BEGIN_SRC emacs-lisp

(define-key evil-motion-state-map ")" 'sentence-nav-evil-forward)
(define-key evil-motion-state-map "(" 'sentence-nav-evil-backward)
(define-key evil-motion-state-map "g)" 'sentence-nav-evil-forward-end)
(define-key evil-motion-state-map "g(" 'sentence-nav-evil-backward-end)
(define-key evil-outer-text-objects-map "s" 'sentence-nav-evil-a-sentence)
(define-key evil-inner-text-objects-map "s" 'sentence-nav-evil-inner-sentence)

#+END_SRC

** Org-agenda Vim Keybindings                                 :orgmode:evil:
#+BEGIN_SRC emacs-lisp
(eval-after-load 'org-agenda
 '(progn
    (evil-set-initial-state 'org-agenda-mode 'normal)
    (evil-define-key 'normal org-agenda-mode-map
      (kbd "<RET>") 'org-agenda-switch-to
      (kbd "\t") 'org-agenda-goto

      "q" 'org-agenda-quit
      "r" 'org-agenda-redo
      "S" 'org-save-all-org-buffers
      "gj" 'org-agenda-goto-date
      "gJ" 'org-agenda-clock-goto
      "gm" 'org-agenda-bulk-mark
      "go" 'org-agenda-open-link
      "s" 'org-agenda-schedule
      "+" 'org-agenda-priority-up
      "," 'org-agenda-priority
      "-" 'org-agenda-priority-down
      "y" 'org-agenda-todo-yesterday
      "n" 'org-agenda-add-note
      "t" 'org-agenda-todo
      ":" 'org-agenda-set-tags
      ";" 'org-timer-set-timer
      "I" 'helm-org-task-file-headings
      "i" 'org-agenda-clock-in-avy
      "O" 'org-agenda-clock-out-avy
      "u" 'org-agenda-bulk-unmark
      "x" 'org-agenda-exit
      "j"  'org-agenda-next-line
      "k"  'org-agenda-previous-line
      "vt" 'org-agenda-toggle-time-grid
      "va" 'org-agenda-archives-mode
      "vw" 'org-agenda-week-view
      "vl" 'org-agenda-log-mode
      "vd" 'org-agenda-day-view
      "vc" 'org-agenda-show-clocking-issues
      "g/" 'org-agenda-filter-by-tag
      "o" 'delete-other-windows
      "gh" 'org-agenda-holiday
      "gv" 'org-agenda-view-mode-dispatch
      "f" 'org-agenda-later
      "b" 'org-agenda-earlier
      "c" 'helm-org-capture-templates
      "e" 'org-agenda-set-effort
      "n" nil  ; evil-search-next
      "{" 'org-agenda-manipulate-query-add-re
      "}" 'org-agenda-manipulate-query-subtract-re
      "A" 'org-agenda-toggle-archive-tag
      "." 'org-agenda-goto-today
      "0" 'evil-digit-argument-or-evil-beginning-of-line
      "<" 'org-agenda-filter-by-category
      ">" 'org-agenda-date-prompt
      "F" 'org-agenda-follow-mode
      "D" 'org-agenda-deadline
      "H" 'org-agenda-holidays
      "J" 'org-agenda-next-date-line
      "K" 'org-agenda-previous-date-line
      "L" 'org-agenda-recenter
      "P" 'org-agenda-show-priority
      "R" 'org-agenda-clockreport-mode
      "Z" 'org-agenda-sunrise-sunset
      "T" 'org-agenda-show-tags
      "X" 'org-agenda-clock-cancel
      "[" 'org-agenda-manipulate-query-add
      "g\\" 'org-agenda-filter-by-tag-refine
      "]" 'org-agenda-manipulate-query-subtract)))
#+END_SRC

** Evil escape
#+BEGIN_SRC emacs-lisp

  (use-package evil-escape
    :ensure t
    :commands evil-escape-mode
    :init
    (setq evil-escape-excluded-states '(normal visual multiedit
          emacs motion) evil-escape-excluded-major-modes
          '(neotree-mode) evil-escape-key-sequence "jk"
          evil-escape-delay 0.25)
    (add-hook 'after-init-hook #'evil-escape-mode)
    :config
    ;; no `evil-escape' in minibuffer
    (cl-pushnew #'minibufferp evil-escape-inhibit-functions :test #'eq)

    (define-key evil-insert-state-map  (kbd "C-g") #'evil-escape)
    (define-key evil-replace-state-map (kbd "C-g") #'evil-escape)
    (define-key evil-visual-state-map  (kbd "C-g") #'evil-escape)
    (define-key evil-operator-state-map (kbd "C-g") #'evil-escape))
#+END_SRC
** org-mode
#+BEGIN_SRC emacs-lisp

  (setq org-imenu-depth 5)
  (setq org-hide-emphasis-markers t)
  (setq org-default-notes-file notes-file)
  (setq org-indent-mode t)
  (setq org-todo-keywords
    '((sequence "TODO(t)" "IN PROGRESS(p!)" "DONE(d!)" "CANCELED(c@)")))

  (setq org-keyword-faces
        '(("TODO(t)" . org-warning) ("IN PROGRESS(p!)" . "yellow") ("DONE(d!)" . "blue") ("CANCELED(c@)" . (:foreground "blue" :background "yellow" :weight bold))))
  (setq org-M-RET-may-split-line '((default . nil)))

  (if (eq system-type 'gnu/linux)
      (setq org-ellipsis "▼"))

  (add-to-list 'org-latex-classes
               '("booklet"
                 "\\documentclass[11pt,a4paper]{memoir}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ))

#+END_SRC
** Bookmarks
#+BEGIN_SRC emacs-lisp
  (setq bookmark-save-flag 1)
#+END_SRC
