#+STARTUP: showeverything

* Load paths and imports
** Custom Set Variables (MUST BE FIRST)
#+BEGIN_SRC emacs-lisp
  (custom-set-variables '(helm-ag-command-option "-i"))
#+END_SRC
** Initialization
#+BEGIN_SRC emacs-lisp
  (define-obsolete-function-alias 'org-define-error 'define-error)

  (load-file "~/.emacs.d/custom.el")
  (add-to-list 'load-path "~/.emacs.d/lisp/")
  (add-to-list 'load-path "~/.emacs.d/use-package/")
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
  (add-to-list 'load-path "~/.cargo/bin")

  (require 'package)
  (require 'misc)

  (package-initialize)
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.milkbox.net/packages/") t)
  (add-to-list 'package-archives
               '("elpa" . "https://elpa.gnu.org/packages/") t)
  (add-to-list 'package-archives
               '("org" . "https://orgmode.org/elpa/") t)

  (eval-when-compile
    (add-to-list 'load-path "~/.emacs.d/use-package/")
    (require 'use-package))

#+END_SRC
** Always UTF8, all the time
#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (when (display-graphic-p)
     (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+END_SRC
** Os specific
#+BEGIN_SRC emacs-lisp
  (when (boundp 'w32-pipe-read-delay)
    (setq w32-pipe-read-delay 0))
  ;; Set the buffer size to 64K on Windows (from the original 4K)
  (when (boundp 'w32-pipe-buffer-size)
    (setq irony-server-w32-pipe-buffer-size (* 64 1024)))

  (getenv "HOME")

  (setq notes-file nil)

  (setq mac-command-modifier 'control)

  (if (eq system-type 'darwin)
      (setq notes-file "~/Desktop/Notes.org")
    (setq notes-file "~/Desktop/Notes.org.gpg"))

  (if (eq system-type 'windows-nt)
      (setq org-archive-location (getenv "ORGARCHIVE")))

  (if (eq system-type 'windows-nt)
      (setq config-file (getenv "EMACSCONFIG"))
    (setq config-file "~/.emacs.d/configuration.org"))

  (if (eq system-type 'windows-nt)
      (progn
        (setq w32-get-true-file-attributes nil)))

  (if (eq system-type 'windows-nt)
      (progn
        (setq exec-path (append exec-path '("c:/Cygwin64/bin/")))
        (setq python-shell-interpreter "c:/Program Files (x86)/Python36-32/python.exe")
        ))


  (if (eq system-type 'windows-nt)
      (let ((proc (start-process "cmd" nil "cmd.exe" "/C" "start" "cmd.exe")))
        (set-process-query-on-exit-flag proc nil)))

  (if (eq system-type 'darwin)
      (setq ispell-program-name "/usr/local/bin/ispell"))
#+END_SRC
** Use-package
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-C-u-scroll t)
    (setq evil-want-keybinding nil)
    (setq evil-want-integration t)
    :config
    (evil-mode 1))

  (use-package smart-mode-line
    :after evil
    :ensure t
    :config
    (progn
      (setq evil-mode-line-format '(before . mode-line-front-space))
      (setq sml/theme 'dark)
      (setq sml/no-confirm-load-theme t)
      (setq sml/name-width 40)
      (setq sml/mode-width "full")
      (sml/setup)
      ))

  (use-package evil-leader
    :after evil
    :ensure t)

  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))

  (use-package ample-regexps
    :ensure t)

  (use-package sentence-navigation)

  (use-package goto-chg
    :ensure t)

  (use-package diminish
    :ensure t)

  (use-package writegood-mode
    :ensure t)

  (use-package auto-indent-mode
    :diminish
    :config
    (auto-indent-global-mode))

  (use-package centered-cursor-mode
    :ensure t
    :diminish
    :config
    (define-global-minor-mode my-global-centered-cursor-mode centered-cursor-mode
      (lambda ()
        (when (not (memq major-mode
                         (list 'Info-mode 'term-mode 'eshell-mode 'shell-mode 'php-mode)))
          (centered-cursor-mode))))
    (my-global-centered-cursor-mode 1)
    )

  (use-package ac-php
    :ensure t)

  (use-package company
    :diminish
    :ensure company
    :config
    (add-hook 'after-init-hook 'global-company-mode)
    (setq company-backends
          '((company-files
             company-keywords
             company-capf
             company-predictive
             company-cmake))))

  (use-package company-try-hard
    :ensure t)

  (use-package powerbuilder-mode
    :if (eq system-type 'windows-nt))

  (use-package popup)

  (use-package org-bullets
    :if
    (eq system-type 'gnu/linux)
    :ensure t
    :init
    (setq org-bullets-bullet-list
          '("◉" "◎" "⚫" "○" "►" "◇"))
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  (use-package org
    :pin org
    :diminish
    :config
    (setq org-agenda-files (list notes-file)))

  (use-package ox-md)

  (use-package ox-twbs
    :if
    (eq system-type 'gnu/linux))

  (use-package ox-latex)

  (use-package atomic-chrome
    :if (eq system-type 'windows-nt))

  (use-package dired+
    :init
    (setq dired-dwim-target t)
    :hook
    (dired-hide-details-mode))

  (use-package windows-path)

  (use-package ps-ccrypt
    :defer t
    :if (eq system-type 'gnu/linux))

  (use-package epa-file
    :config)

  (use-package which-key
    :ensure t
    :config
    (which-key-mode))

  (use-package helm
    :ensure t
    :config
    (helm-mode 1)
    (setq helm-bookmark-show-location t))

  (use-package ws-trim
    :diminish
    :config
    (global-ws-trim-mode t)
    (set-default 'ws-trim-level 3)
    (setq ws-trim-global-modes '(guess (not message-mode eshell-mode shell-mode))))

  (use-package cygwin-mount
    :if (eq system-type 'windows-nt))

  (use-package setup-cygwin
    :if (eq system-type 'windows-nt)
    :config
    (set-shell-cmdproxy)
    (setq w32-quote-process-args t)
    (setq-default w32-quote-process-args t))

  (use-package unbound)

  (use-package adjust-parens
    :ensure t)

  (use-package auto-correct
    :diminish
    :ensure t
    :config
    (auto-correct-mode))

  (use-package csv-mode
    :ensure t)

  (use-package vlf-setup
    :ensure vlf)

  (use-package wconf
    :ensure t)

  (use-package darkroom
    :ensure t)

  (use-package yasnippet
    :ensure t
    :config
    (yas-global-mode 1))

  (use-package highlight-indent-guides
    :ensure t
    :config
    (add-hook 'prog-mode-hook 'highlight-indent-guides-mode))

  (use-package exec-path-from-shell
    :ensure t
    :init
    (exec-path-from-shell-initialize))

  (use-package flycheck
    :ensure t)

  (use-package magit
    :ensure t)

  (use-package evil-magit
    :ensure t
    :config (evil-magit-init))

  (use-package perspective
    :ensure t
    :init
    (persp-mode))

  (use-package ace-window)

  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                 (if (executable-find "python") 3 0)
            treemacs-deferred-git-apply-delay      0.5
            treemacs-display-in-side-window        t
            treemacs-file-event-delay              5000
            treemacs-file-follow-delay             0.2
            treemacs-follow-after-init             t
            treemacs-git-command-pipe              ""
            treemacs-goto-tag-strategy             'refetch-index
            treemacs-indentation                   1
            treemacs-indentation-string            " "
            treemacs-is-never-other-window         t
            treemacs-max-git-entries               5000
            treemacs-no-png-images                 nil
            treemacs-no-delete-other-windows       t
            treemacs-project-follow-cleanup        nil
            treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-recenter-distance             0.1
            treemacs-recenter-after-file-follow    nil
            treemacs-recenter-after-tag-follow     nil
            treemacs-recenter-after-project-jump   'always
            treemacs-recenter-after-project-expand 'on-distance
            treemacs-show-cursor                   nil
            treemacs-show-hidden-files             t
            treemacs-silent-filewatch              nil
            treemacs-silent-refresh                nil
            treemacs-sorting                       'alphabetic-desc
            treemacs-space-between-root-nodes      t
            treemacs-tag-follow-cleanup            t
            treemacs-tag-follow-delay              1.5
            treemacs-width                         35)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode t)
      (pcase (cons (not (null (executable-find "git")))
                   (not (null (executable-find "python3"))))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple))))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-evil
    :after treemacs evil
    :ensure t)

  (use-package treemacs-magit
    :after treemacs magit
    :ensure t)

  (use-package helm-ag
    :ensure t)

  (use-package json-mode
    :ensure t)

  (use-package multi-term
    :ensure t)

  (use-package bind-key
    :ensure t)

  (use-package org-jira
    :ensure t)

  (use-package projectile
    :ensure t)

  (use-package helm-projectile
    :ensure t)

  (use-package dumb-jump
    :ensure t)
#+END_SRC

* Editor config
** Operating System Integration
#+BEGIN_SRC emacs-lisp
  (setq delete-by-moving-to-trash t)

  (setq select-enable-clipboard nil)

  (defun enable-system-clipboard ()
    (interactive)
    (setq select-enable-clipboard t))


  (if (eq system-type 'window-nt)
      (progn
        'atomic-chrome-start-httpd
        'atomic-chrome-start-server))

  (if (eq system-type 'windows-nt)
      (progn
        (let ((proc (start-process "cmd" nil "cmd.exe" "/C" "start" "cmd.exe")))
          (set-process-query-on-exit-flag proc nil))))

  (defcustom powershell-location-of-exe
    "c:\\windows\\SYSWOW64\\WindowsPowerShell\\v1.0\\powershell.exe"
    "A string, providing the location of the Powershell.exe."
    :group 'powershell)

  (setq save-interprogram-paste-before-kill t)
#+END_SRC
** Graphics / UI / Appearance / look

#+BEGIN_SRC emacs-lisp

  (setq inhibit-splash-screen t)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  (setq visible-bell 1)
  (show-paren-mode 1)
  (display-time-mode 1)

  (load-theme 'zenburn t)

  (set-face-attribute 'default nil :height 160)

  (blink-cursor-mode -1)

  (global-hl-line-mode)
  (set-face-background hl-line-face "#800000")

  (set-cursor-color "#ff83cf")

#+END_SRC
** Startup hook
#+BEGIN_SRC emacs-lisp
  ; Open split shell on launch
  (add-hook 'emacs-startup-hook
            (lambda ()
              (let ((w (split-window-below -10)))
                (select-window w)
                (multi-term))
              (switch-to-buffer "*terminal<1>*")
              (other-window 1))) ; attempt workaround for weird cursor centering issue

  (defun split-for-term ()
    (interactive)
    (let ((w (split-window-below -20)))
      (select-window w)
      (switch-to-buffer "*terminal<1>*")))
#+END_SRC
** Interaction / input
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)

  (setq comint-password-prompt-regexp
        (concat comint-password-prompt-regexp
                "\\|Enter password"))
#+END_SRC
** Terminal
#+BEGIN_SRC emacs-lisp
  (setq term-input-ring-size 200)
  (setq term-buffer-maximum-size 8191)

  (add-hook 'term-load-hook (lambda ()
                              (other-window 3)))

#+END_SRC
** JIRA
#+BEGIN_SRC emacs-lisp

  (setq jiralib-url "https://celltrak.atlassian.net")

#+END_SRC
** Text
#+BEGIN_SRC emacs-lisp

  (if (eq system-type 'windows-nt)
      (add-to-list 'exec-path ""))

  (setq-default search-invisible t)

  (if (eq system-type 'darwin)
      (set-face-attribute 'default nil :height 200))

  (setq ccm-recenter-at-end-of-file t)

  (setq-default tab-width 4)

#+END_SRC
** Code completion / show
#+BEGIN_SRC emacs-lisp

  (setq company-dabbrev-downcase 0)
  (setq company-idle-delay 0.3)

  (setq dumb-jump-prefer-searcher 'ag)

#+END_SRC
** LaTex
#+BEGIN_SRC emacs-lisp
  (setq latex-run-command "pdflatex")

#+END_SRC
** Evil Mode Config
#+BEGIN_SRC emacs-lisp
  ; For modes where we don't want to use evil

  (evil-set-initial-state 'term-mode 'emacs)
  (evil-set-initial-state 'dired-mode 'emacs)
  (evil-select-search-module  'evil-search-module 'evil-search)

  (setq evil-want-keybinding nil)
#+END_SRC

** Keybindings / shortcuts

#+BEGIN_SRC emacs-lisp
  (global-evil-leader-mode)

  (windmove-default-keybindings)

  (defvar my-leader-map (make-sparse-keymap))
  (defvar my-org-menu (make-sparse-keymap))
  (defvar my-nav-menu (make-sparse-keymap))
  (defvar my-command-menu (make-sparse-keymap))
  (defvar my-buffer-menu (make-sparse-keymap))
  (defvar my-window-menu (make-sparse-keymap))
  (defvar my-visual-menu (make-sparse-keymap))
  (defvar my-perspective-menu (make-sparse-keymap))
  (defvar my-treemacs-menu (make-sparse-keymap))
  (defvar my-project-menu (make-sparse-keymap))
  (defvar my-ag-menu (make-sparse-keymap))
  (defvar my-multiterm-menu (make-sparse-keymap))

  (bind-keys*
   ("C-x b" . helm-buffers-list)
   ("C-c r" . rename-buffer)
   ("M-o" . ace-window)
   ("M-x" . helm-M-x)
   ("C-c C-p" . org-previous-visible-heading)
   ("C-c j" . dumb-jump-go)
   ("C-c d" . dired-jump)
   ("C-y" . evil-paste-before)
   ("C-c u" . universal-argument)
   ("C-c v" . paste-from-clipboard)
   ("C-c f" . helm-find-files)
   ("M-w" . copy-to-clipboard)
   ("C-c C-n" . org-next-visible-heading))

  (bind-key* "C-c m" my-multiterm-menu)
  (bind-key* "C-c e" my-perspective-menu)
  (bind-key* "C-c p" my-project-menu)
  (bind-key* "C-c g" my-nav-menu)
  (bind-key* "C-c c" my-command-menu)
  (bind-key* "C-c o" my-org-menu)
  (bind-key* "C-c t" my-treemacs-menu)
  (bind-key* "C-c b" my-buffer-menu)
  (bind-key* "C-c a" my-ag-menu)
  (bind-key* "C-c C-y"  (lambda ()
                          (interactive)
                          (setq select-enable-clipboard t)
                          (term-paste)
                          (setq select-enable-clipboard nil)))

  (evil-leader/set-leader "<SPC>")

  (evil-leader/set-key
    "o" my-org-menu
    "a" my-ag-menu
    "c" my-command-menu
    "b" my-buffer-menu
    "w" my-window-menu
    "d" 'dired-jump
    "g" my-nav-menu
    "v" my-visual-menu
    "e" my-perspective-menu
    "p" my-project-menu
    "t" my-treemacs-menu
    "m" my-multiterm-menu
    "SPC" 'helm-M-x
    "f" 'helm-find-files
    "n" 'evil-buffer-new
    "j" 'dumb-jump-go
    "s" 'save-buffer
    "r" 'rename-buffer
    "TAB" 'company-try-hard
    "q" 'save-buffers-kill-terminal)

  (with-eval-after-load 'evil-maps
    (progn
      (define-key evil-normal-state-map (kbd "M-t") 'scroll-other-window)
      (define-key evil-normal-state-map (kbd "C-y") 'evil-paste-before)
      (define-key evil-insert-state-map (kbd "C-y") 'evil-paste-before)
      (define-key evil-insert-state-map (kbd "C-v") 'paste-from-clipboard)
      (define-key evil-normal-state-map (kbd "M-c") 'scroll-other-window-down)
      (define-key evil-normal-state-map (kbd "g t") 'evil-next-buffer)
      (define-key evil-normal-state-map (kbd "g T") 'evil-prev-buffer)))

  (defun load-notes ()
    "Load notes org"
    (interactive)
    (find-file notes-file))

  (defun load-config ()
    "Load emacs config"
    (interactive)
    (find-file config-file))


  (define-key my-nav-menu (kbd "n") 'load-notes)
  (define-key my-nav-menu (kbd "c") 'load-config)
  (define-key my-nav-menu (kbd "s") '(lambda nil
                                       (interactive)
                                       (switch-to-buffer (get-buffer-create "*scratch*"))
                                       (lisp-interaction-mode)))

  (define-key my-org-menu (kbd "c") 'org-capture)
  (define-key my-org-menu (kbd "a") 'org-agenda)
  (define-key my-org-menu (kbd "t") 'org-todo-list)
  (define-key my-org-menu (kbd "r") 'org-refile)
  (define-key my-org-menu (kbd "m") 'helm-imenu)
  (define-key my-org-menu (kbd "i") 'org-insert-item)

  (define-key my-visual-menu (kbd "v") 'visual-line-mode)
  (define-key my-visual-menu (kbd "c") 'centered-cursor-mode)

  (define-key my-command-menu (kbd "s") 'bookmark-set)
  (define-key my-command-menu (kbd "c") 'helm-filtered-bookmarks)

  (define-key my-buffer-menu (kbd "b") 'helm-buffers-list)
  (define-key my-buffer-menu (kbd "i") 'ibuffer)
  (define-key my-buffer-menu (kbd "c") 'kill-buffer)
  (define-key my-buffer-menu (kbd "n") 'next-buffer)
  (define-key my-buffer-menu (kbd "p") 'previous-buffer)

  (define-key my-window-menu (kbd "k") 'delete-window)
  (define-key my-window-menu (kbd "c") 'delete-other-windows)
  (define-key my-window-menu (kbd "h") 'split-window-horizontally)
  (define-key my-window-menu (kbd "v") 'split-window-vertically)
  (define-key my-window-menu (kbd "o") 'other-window)
  (define-key my-window-menu (kbd "f") 'toggle-frame-fullscreen)

  (define-key my-treemacs-menu (kbd "s") 'treemacs-switch-workspace)
  (define-key my-treemacs-menu (kbd "b") 'treemacs-bookmark)
  (define-key my-treemacs-menu (kbd "s") 'treemacs-add-bookmark)
  (define-key my-treemacs-menu (kbd "w") 'treemacs-create-workspace)
  (define-key my-treemacs-menu (kbd "c") 'treemacs-delete-other-windows)
  (define-key my-treemacs-menu (kbd "a") 'treemacs-add-project-to-workspace)
  (define-key my-treemacs-menu (kbd "f") 'treemacs-find-file)
  (define-key my-treemacs-menu (kbd "t") 'treemacs)
  (define-key my-treemacs-menu (kbd "g") 'treemacs-switch-workspace)


  (define-key my-ag-menu (kbd "p") 'helm-ag-project-root)
  (define-key my-ag-menu (kbd "P") 'helm-do-ag-project-root)
  (define-key my-ag-menu (kbd "a") 'helm-ag)
  (define-key my-ag-menu (kbd "f") 'helm-ag-this-file)
  (define-key my-ag-menu (kbd "d") 'helm-do-ag)

  (define-key my-project-menu (kbd "h") 'helm-projectile)
  (define-key my-project-menu (kbd "a") 'helm-projectile-ag)
  (define-key my-project-menu (kbd "r") 'projectile-replace)
  (define-key my-project-menu (kbd "f") 'helm-projectile-find-file)
  (define-key my-project-menu (kbd "g") 'treemacs-find-file)
  (define-key my-project-menu (kbd "t") 'treemacs)

  (define-key my-multiterm-menu (kbd "m") 'multi-term)
  (define-key my-multiterm-menu (kbd "p") 'multi-term-prev)
  (define-key my-multiterm-menu (kbd "n") 'multi-term-next)
  (define-key my-multiterm-menu (kbd "s") 'split-for-term)
  (define-key my-multiterm-menu (kbd "l") 'term-line-mode)
  (define-key my-multiterm-menu (kbd "c") 'term-char-mode)
#+END_SRC
** Evil sentence
#+BEGIN_SRC emacs-lisp

(define-key evil-motion-state-map ")" 'sentence-nav-evil-forward)
(define-key evil-motion-state-map "(" 'sentence-nav-evil-backward)
(define-key evil-motion-state-map "g)" 'sentence-nav-evil-forward-end)
(define-key evil-motion-state-map "g(" 'sentence-nav-evil-backward-end)
(define-key evil-outer-text-objects-map "s" 'sentence-nav-evil-a-sentence)
(define-key evil-inner-text-objects-map "s" 'sentence-nav-evil-inner-sentence)

#+END_SRC

** Org-agenda Vim Keybindings                                 :orgmode:evil:
#+BEGIN_SRC emacs-lisp
  (eval-after-load 'org-agenda
   '(progn
      (evil-set-initial-state 'org-agenda-mode 'normal)
      (evil-define-key 'normal org-agenda-mode-map
        (kbd "<RET>") 'org-agenda-switch-to
        (kbd "\t") 'org-agenda-goto

        "q" 'org-agenda-quit
        "r" 'org-agenda-redo
        "S" 'org-save-all-org-buffers
        "gj" 'org-agenda-goto-date
        "gJ" 'org-agenda-clock-goto
        "gm" 'org-agenda-bulk-mark
        "go" 'org-agenda-open-link
        "s" 'org-agenda-schedule
        "+" 'org-agenda-priority-up
        "," 'org-agenda-priority
        "-" 'org-agenda-priority-down
        "y" 'org-agenda-todo-yesterday
        "n" 'org-agenda-add-note
        "t" 'org-agenda-todo
        ":" 'org-agenda-set-tags
        ";" 'org-timer-set-timer
        "I" 'helm-org-task-file-headings
        "i" 'org-agenda-clock-in-avy
        "O" 'org-agenda-clock-out-avy
        "u" 'org-agenda-bulk-unmark
        "x" 'org-agenda-exit
        "j"  'org-agenda-next-line
        "k"  'org-agenda-previous-line
        "vt" 'org-agenda-toggle-time-grid
        "va" 'org-agenda-archives-mode
        "vw" 'org-agenda-week-view
        "vl" 'org-agenda-log-mode
        "vd" 'org-agenda-day-view
        "vc" 'org-agenda-show-clocking-issues
        "g/" 'org-agenda-filter-by-tag
        "o" 'delete-other-windows
        "gh" 'org-agenda-holiday
        "gv" 'org-agenda-view-mode-dispatch
        "f" 'org-agenda-later
        "b" 'org-agenda-earlier
        "c" 'helm-org-capture-templates
        "e" 'org-agenda-set-effort
        "n" nil  ; evil-search-next
        "{" 'org-agenda-manipulate-query-add-re
        "}" 'org-agenda-manipulate-query-subtract-re
        "A" 'org-agenda-toggle-archive-tag
        "." 'org-agenda-goto-today
        "0" 'evil-digit-argument-or-evil-beginning-of-line
        "<" 'org-agenda-filter-by-category
        ">" 'org-agenda-date-prompt
        "F" 'org-agenda-follow-mode
        "D" 'org-agenda-deadline
        "H" 'org-agenda-holidays
        "J" 'org-agenda-next-date-line
        "K" 'org-agenda-previous-date-line
        "L" 'org-agenda-recenter
        "P" 'org-agenda-show-priority
        "R" 'org-agenda-clockreport-mode
        "Z" 'org-agenda-sunrise-sunset
        "T" 'org-agenda-show-tags
        "X" 'org-agenda-clock-cancel
        "[" 'org-agenda-manipulate-query-add
        "g\\" 'org-agenda-filter-by-tag-refine
        "]" 'org-agenda-manipulate-query-subtract)))
#+END_SRC

** Evil escape
#+BEGIN_SRC emacs-lisp

  (use-package evil-escape
    :ensure t
    :commands evil-escape-mode
    :init
    (setq evil-escape-excluded-states '(normal visual multiedit
          emacs motion) evil-escape-excluded-major-modes
          '(neotree-mode) evil-escape-key-sequence "jk"
          evil-escape-delay 0.25)
    (add-hook 'after-init-hook #'evil-escape-mode)
    :config
    ;; no `evil-escape' in minibuffer
    (cl-pushnew #'minibufferp evil-escape-inhibit-functions :test #'eq)

    (define-key evil-insert-state-map  (kbd "C-g") #'evil-escape)
    (define-key evil-replace-state-map (kbd "C-g") #'evil-escape)
    (define-key evil-visual-state-map  (kbd "C-g") #'evil-escape)
    (define-key evil-operator-state-map (kbd "C-g") #'evil-escape))
#+END_SRC
** org-mode
#+BEGIN_SRC emacs-lisp
  (setq org-imenu-depth 5)
  (setq org-hide-emphasis-markers t)
  (setq org-default-notes-file notes-file)
  (setq org-indent-mode t)
  (setq org-startup-truncated nil)
  (setq org-todo-keywords
        '((sequence "TODO(t)" "MAYBE(m!)" "IN PROGRESS(p!)" "DONE(d!)" "CANCELLED(c@)")))

  (setq org-keyword-faces
        '(("TODO(t)" . org-warning) ("IN PROGRESS(p!)" . "yellow") ("MAYBE(m!)" . "blue") ("DONE(d!)" . "green") ("CANCELED(c@)" . (:foreground "red" :background "yellow" :weight bold))))
  (setq org-M-RET-may-split-line '((default . nil)))

  (if (eq system-type 'gnu/linux)
      (setq org-ellipsis "▼"))

  (setq org-blank-before-new-entry
        '((heading . always)
          (plain-list-item . nil)))

  (add-to-list 'org-latex-classes
               '("booklet"
                 "\\documentclass[11pt,a4paper]{memoir}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ))


  (add-to-list 'org-latex-classes
               '("memoir-book"
                 "\\documentclass[11pt,a4paper]{memoir}"
                 ("\\chapter{%s}" . "\\chapter*{%s}")
                 ("\\section{%s}" . "\\section*{%s}")
                 ))

  (add-to-list 'org-latex-classes
               '("book"
                 "\\documentclass[11pt,a4paper]{book}"
                 ("\\chapter{%s}" . "\\chapter*{%s}")
                 ("\\section{%s}" . "\\section*{%s}")
                 ))

  (setq org-export-with-smart-quotes t)

  (load "~/.emacs.d/capture-templates.el")
  (setq org-agenda-skip-scheduled-if-done t)


  (advice-add 'org-archive-done-tasks :after #'org-save-all-org-buffers)
  (advice-add 'org-archive-cancelled-tasks :after #'org-save-all-org-buffers)
#+END_SRC
** Helm mode
#+BEGIN_SRC emacs-lisp

  (setq helm-boring-buffer-regexp-list (list (rx "*magit-") (rx "*helm") (rx "*Minibuf") (rx "*Echo area") (rx "*Treemacs-Framebuff*") (rx "*which-key*") (rx "*Help*") (rx "*Buffer List*") (rx "*Org Todo*")))

#+END_SRC
** Bookmarks
#+BEGIN_SRC emacs-lisp
  (setq bookmark-save-flag 1)
#+END_SRC
** Perspective config
#+BEGIN_SRC emacs-lisp

  (define-key my-perspective-menu (kbd "s") 'persp-switch)
  (define-key my-perspective-menu (kbd "k") 'persp-remove-buffer)
  (define-key my-perspective-menu (kbd "c") 'persp-kill)

  (define-key my-perspective-menu (kbd "r") 'persp-rename)
  (define-key my-perspective-menu (kbd "a") 'persp-add-buffer)
  (define-key my-perspective-menu (kbd "A") 'persp-set-buffer)
  (define-key my-perspective-menu (kbd "i") 'persp-import)
  (define-key my-perspective-menu (kbd "n") 'persp-next)
  (define-key my-perspective-menu (kbd "p") 'persp-prev)

#+END_SRC
* Mode control
** Auto mode alist & hooks
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.log\\'" . log-view-mode))
  (add-to-list 'auto-mode-alist '("\\.bat\\'" . bat-mode))


  (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
  (add-to-list 'auto-mode-alist '("\\.org.gpg\\'" . org-mode))

  (add-hook 'log-view-mode-hook 'auto-revert-mode)
  (add-hook 'bat-mode-hook 'auto-revert-mode)

#+END_SRC
** Global and toggled modes
#+BEGIN_SRC emacs-lisp

(winner-mode 1)

(if (not (eq system-type 'windows-nt))
    (global-prettify-symbols-mode t))

(menu-bar-mode -1)
(toggle-scroll-bar -1)
(tool-bar-mode -1)

#+END_SRC
** Load hooks
#+BEGIN_SRC emacs-lisp

  (add-hook 'before-save-hook 'whitespace-cleanup)

  (add-hook 'python-mode-hook
            (lambda ()
              (setq python-indent 2)))

  (add-hook 'powershell-mode-hook
            (lambda ()
              (setq powershell-indent 2)))

  (add-hook 'php-mode-hook
            (lambda ()
              (setq indent-tabs-mode t)
              (setq tab-width 4)
              (setq php-mode-indent-level 2)
              (c-set-style "symfony2")))

  (add-hook 'js-mode-hook
            (lambda ()
              (setq indent-tabs-mode t)
              (setq tab-width 2)
              (setq js-indent-level 2)))

  (add-hook 'json-mode-hook
            (lambda ()
              (make-local-variable 'js-indent-level)
              (setq js-indent-level 2)))

#+END_SRC
* File handling
** Encryption
#+BEGIN_SRC emacs-lisp
  (if (eq system-type 'window-nt)
      (setf epa-pinentry-mode 'loopback))
  (epa-file-enable)

#+END_SRC
** Backups & versioning
#+BEGIN_SRC emacs-lisp

(setq backup-directory-alist
          `(("." . ,(concat user-emacs-directory "backups"))))
;; keep old versions, much version control
(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)

(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

(setq savehist-file "~/.emacs.d/savehist")
(savehist-mode 1)
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
  search-ring
  regexp-search-ring))

#+END_SRC
* Language specific
** Rust
#+BEGIN_SRC emacs-lisp
  (setq rust-indent-offset 2)
#+END_SRC
